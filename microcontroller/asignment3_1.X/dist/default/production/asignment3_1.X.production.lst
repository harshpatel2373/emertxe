

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Dec 27 16:34:12 2021

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	dabs	1,0x7E,2
    20  0000                     
    21                           ; Version 1.41
    22                           ; Generated 25/01/2017 GMT
    23                           ; 
    24                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC16F877A Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  0007                     	;# 
    63  0008                     	;# 
    64  0009                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  000D                     	;# 
    69  000E                     	;# 
    70  000E                     	;# 
    71  000F                     	;# 
    72  0010                     	;# 
    73  0011                     	;# 
    74  0012                     	;# 
    75  0013                     	;# 
    76  0014                     	;# 
    77  0015                     	;# 
    78  0015                     	;# 
    79  0016                     	;# 
    80  0017                     	;# 
    81  0018                     	;# 
    82  0019                     	;# 
    83  001A                     	;# 
    84  001B                     	;# 
    85  001B                     	;# 
    86  001C                     	;# 
    87  001D                     	;# 
    88  001E                     	;# 
    89  001F                     	;# 
    90  0081                     	;# 
    91  0085                     	;# 
    92  0086                     	;# 
    93  0087                     	;# 
    94  0088                     	;# 
    95  0089                     	;# 
    96  008C                     	;# 
    97  008D                     	;# 
    98  008E                     	;# 
    99  0091                     	;# 
   100  0092                     	;# 
   101  0093                     	;# 
   102  0094                     	;# 
   103  0098                     	;# 
   104  0099                     	;# 
   105  009C                     	;# 
   106  009D                     	;# 
   107  009E                     	;# 
   108  009F                     	;# 
   109  010C                     	;# 
   110  010D                     	;# 
   111  010E                     	;# 
   112  010F                     	;# 
   113  018C                     	;# 
   114  018D                     	;# 
   115  0000                     	;# 
   116  0001                     	;# 
   117  0002                     	;# 
   118  0003                     	;# 
   119  0004                     	;# 
   120  0005                     	;# 
   121  0006                     	;# 
   122  0007                     	;# 
   123  0008                     	;# 
   124  0009                     	;# 
   125  000A                     	;# 
   126  000B                     	;# 
   127  000C                     	;# 
   128  000D                     	;# 
   129  000E                     	;# 
   130  000E                     	;# 
   131  000F                     	;# 
   132  0010                     	;# 
   133  0011                     	;# 
   134  0012                     	;# 
   135  0013                     	;# 
   136  0014                     	;# 
   137  0015                     	;# 
   138  0015                     	;# 
   139  0016                     	;# 
   140  0017                     	;# 
   141  0018                     	;# 
   142  0019                     	;# 
   143  001A                     	;# 
   144  001B                     	;# 
   145  001B                     	;# 
   146  001C                     	;# 
   147  001D                     	;# 
   148  001E                     	;# 
   149  001F                     	;# 
   150  0081                     	;# 
   151  0085                     	;# 
   152  0086                     	;# 
   153  0087                     	;# 
   154  0088                     	;# 
   155  0089                     	;# 
   156  008C                     	;# 
   157  008D                     	;# 
   158  008E                     	;# 
   159  0091                     	;# 
   160  0092                     	;# 
   161  0093                     	;# 
   162  0094                     	;# 
   163  0098                     	;# 
   164  0099                     	;# 
   165  009C                     	;# 
   166  009D                     	;# 
   167  009E                     	;# 
   168  009F                     	;# 
   169  010C                     	;# 
   170  010D                     	;# 
   171  010E                     	;# 
   172  010F                     	;# 
   173  018C                     	;# 
   174  018D                     	;# 
   175                           
   176                           	psect	idataCOMMON
   177  0671                     __pidataCOMMON:	
   178                           
   179                           ;initializer for read_digital_keypad@once
   180  0671  3401               	retlw	1
   181  0006                     _PORTB	set	6
   182  0008                     _PORTD	set	8
   183  0086                     _TRISB	set	134
   184  0088                     _TRISD	set	136
   185                           
   186                           ; #config settings
   187  0000                     
   188                           	psect	cinit
   189  07F2                     start_initialization:	
   190  07F2                     __initialization:	
   191                           
   192                           ; Initialize objects allocated to COMMON
   193  07F2  120A  118A  2671   	fcall	__pidataCOMMON	;fetch initializer
   194  07F5  00FD               	movwf	__pdataCOMMON& (0+127)
   195                           
   196                           ; Clear objects allocated to BANK0
   197  07F6  01A8               	clrf	__pbssBANK0& (0+127)
   198  07F7  01A9               	clrf	(__pbssBANK0+1)& (0+127)
   199  07F8  01AA               	clrf	(__pbssBANK0+2)& (0+127)
   200  07F9  01AB               	clrf	(__pbssBANK0+3)& (0+127)
   201                           
   202                           ; Clear objects allocated to COMMON
   203  07FA  01FB               	clrf	__pbssCOMMON& (0+127)
   204  07FB  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
   205  07FC                     end_of_initialization:	
   206                           ;End of C runtime variable initialization code
   207                           
   208  07FC                     __end_of__initialization:	
   209  07FC  0183               	clrf	3
   210  07FD  120A  118A  2F64   	ljmp	_main	;jump to C main() function
   211                           
   212                           	psect	bssCOMMON
   213  007B                     __pbssCOMMON:	
   214  007B                     run_train@direction_flag:	
   215  007B                     	ds	2
   216                           
   217                           	psect	dataCOMMON
   218  007D                     __pdataCOMMON:	
   219  007D                     read_digital_keypad@once:	
   220  007D                     	ds	1
   221                           
   222                           	psect	bssBANK0
   223  0028                     __pbssBANK0:	
   224  0028                     left_right_train@set_on_flag:	
   225  0028                     	ds	2
   226  002A                     run_train@set_on_flag:	
   227  002A                     	ds	2
   228                           
   229                           	psect	cstackCOMMON
   230  0070                     __pcstackCOMMON:	
   231  0070                     ?_init_digital_keypad:	
   232  0070                     ??_init_digital_keypad:	
   233                           ; 1 bytes @ 0x0
   234                           
   235  0070                     ?_read_digital_keypad:	
   236                           ; 1 bytes @ 0x0
   237                           
   238  0070                     ??_read_digital_keypad:	
   239                           ; 1 bytes @ 0x0
   240                           
   241  0070                     ?_init_config:	
   242                           ; 1 bytes @ 0x0
   243                           
   244  0070                     ??_init_config:	
   245                           ; 1 bytes @ 0x0
   246                           
   247  0070                     ?_run_train:	
   248                           ; 1 bytes @ 0x0
   249                           
   250  0070                     ?_left_right_train:	
   251                           ; 1 bytes @ 0x0
   252                           
   253  0070                     ?_alternate_nibble:	
   254                           ; 1 bytes @ 0x0
   255                           
   256  0070                     ?_alernate_led:	
   257                           ; 1 bytes @ 0x0
   258                           
   259  0070                     ?_main:	
   260                           ; 1 bytes @ 0x0
   261                           
   262  0070                     run_train@flag:	
   263                           ; 1 bytes @ 0x0
   264                           
   265  0070                     left_right_train@flag:	
   266                           ; 2 bytes @ 0x0
   267                           
   268  0070                     alternate_nibble@flag:	
   269                           ; 2 bytes @ 0x0
   270                           
   271  0070                     alernate_led@flag:	
   272                           ; 2 bytes @ 0x0
   273                           
   274                           
   275                           ; 2 bytes @ 0x0
   276  0070                     	ds	1
   277  0071                     read_digital_keypad@mode:	
   278                           
   279                           ; 1 bytes @ 0x1
   280  0071                     	ds	1
   281  0072                     ??_run_train:	
   282  0072                     ??_left_right_train:	
   283                           ; 1 bytes @ 0x2
   284                           
   285  0072                     ??_alternate_nibble:	
   286                           ; 1 bytes @ 0x2
   287                           
   288  0072                     ??_alernate_led:	
   289                           ; 1 bytes @ 0x2
   290                           
   291                           
   292                           ; 1 bytes @ 0x2
   293  0072                     	ds	4
   294  0076                     _run_train$35:	
   295  0076                     _left_right_train$40:	
   296                           ; 2 bytes @ 0x6
   297                           
   298                           
   299                           ; 2 bytes @ 0x6
   300  0076                     	ds	2
   301  0078                     _run_train$36:	
   302                           
   303                           ; 2 bytes @ 0x8
   304  0078                     	ds	2
   305  007A                     ??_main:	
   306                           
   307                           ; 1 bytes @ 0xA
   308  007A                     	ds	1
   309                           
   310                           	psect	cstackBANK0
   311  0020                     __pcstackBANK0:	
   312  0020                     main@mode:	
   313                           
   314                           ; 2 bytes @ 0x0
   315  0020                     	ds	2
   316  0022                     main@wait:	
   317                           
   318                           ; 2 bytes @ 0x2
   319  0022                     	ds	2
   320  0024                     main@cur_key:	
   321                           
   322                           ; 1 bytes @ 0x4
   323  0024                     	ds	1
   324  0025                     main@key:	
   325                           
   326                           ; 1 bytes @ 0x5
   327  0025                     	ds	1
   328  0026                     main@flag:	
   329                           
   330                           ; 2 bytes @ 0x6
   331  0026                     	ds	2
   332                           
   333                           	psect	maintext
   334  0764                     __pmaintext:	
   335 ;;
   336 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   337 ;;
   338 ;; *************** function _main *****************
   339 ;; Defined at:
   340 ;;		line 101 in file "main.c"
   341 ;; Parameters:    Size  Location     Type
   342 ;;		None
   343 ;; Auto vars:     Size  Location     Type
   344 ;;  flag            2    6[BANK0 ] int 
   345 ;;  wait            2    2[BANK0 ] unsigned int 
   346 ;;  mode            2    0[BANK0 ] int 
   347 ;;  key             1    5[BANK0 ] unsigned char 
   348 ;;  cur_key         1    4[BANK0 ] unsigned char 
   349 ;; Return value:  Size  Location     Type
   350 ;;                  1    wreg      void 
   351 ;; Registers used:
   352 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   353 ;; Tracked objects:
   354 ;;		On entry : B00/0
   355 ;;		On exit  : 0/0
   356 ;;		Unchanged: 0/0
   357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   358 ;;      Params:         0       0       0       0       0
   359 ;;      Locals:         0       8       0       0       0
   360 ;;      Temps:          1       0       0       0       0
   361 ;;      Totals:         1       8       0       0       0
   362 ;;Total ram usage:        9 bytes
   363 ;; Hardware stack levels required when called:    2
   364 ;; This function calls:
   365 ;;		_alernate_led
   366 ;;		_alternate_nibble
   367 ;;		_init_config
   368 ;;		_left_right_train
   369 ;;		_read_digital_keypad
   370 ;;		_run_train
   371 ;; This function is called by:
   372 ;;		Startup code after reset
   373 ;; This function uses a non-reentrant model
   374 ;;
   375                           
   376                           
   377                           ;psect for function _main
   378  0764                     _main:	
   379                           
   380                           ;main.c: 103: init_config();
   381                           
   382                           ;incstack = 0
   383                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   384  0764  120A  118A  2678  120A  118A  	fcall	_init_config
   385                           
   386                           ;main.c: 104: int flag = 1;
   387  0769  3001               	movlw	1
   388  076A  1283               	bcf	3,5	;RP0=0, select bank0
   389  076B  1303               	bcf	3,6	;RP1=0, select bank0
   390  076C  00A6               	movwf	main@flag
   391  076D  3000               	movlw	0
   392  076E  00A7               	movwf	main@flag+1
   393                           
   394                           ;main.c: 105: int mode = 1;
   395  076F  3001               	movlw	1
   396  0770  00A0               	movwf	main@mode
   397  0771  3000               	movlw	0
   398  0772  00A1               	movwf	main@mode+1
   399                           
   400                           ;main.c: 106: unsigned char key ;
   401                           ;main.c: 107: unsigned char cur_key = 0x3E ;
   402  0773  303E               	movlw	62
   403  0774  00FA               	movwf	??_main
   404  0775  087A               	movf	??_main,w
   405  0776  00A4               	movwf	main@cur_key
   406                           
   407                           ;main.c: 108: unsigned int wait = 50000 ;
   408  0777  3050               	movlw	80
   409  0778  00A2               	movwf	main@wait
   410  0779  30C3               	movlw	195
   411  077A  00A3               	movwf	main@wait+1
   412  077B                     l54:	
   413                           ;main.c: 109: while (1)
   414                           
   415                           
   416                           ;main.c: 110: {
   417                           ;main.c: 111: key = read_digital_keypad(1);
   418  077B  3001               	movlw	1
   419  077C  120A  118A  269A  120A  118A  	fcall	_read_digital_keypad
   420  0781  00FA               	movwf	??_main
   421  0782  087A               	movf	??_main,w
   422  0783  1283               	bcf	3,5	;RP0=0, select bank0
   423  0784  1303               	bcf	3,6	;RP1=0, select bank0
   424  0785  00A5               	movwf	main@key
   425                           
   426                           ;main.c: 113: if ( key != 0x3F && cur_key != key )
   427  0786  303F               	movlw	63
   428  0787  0625               	xorwf	main@key,w
   429  0788  1903               	btfsc	3,2
   430  0789  2F9A               	goto	l803
   431  078A  0824               	movf	main@cur_key,w
   432  078B  0625               	xorwf	main@key,w
   433  078C  1903               	skipnz
   434  078D  2F9A               	goto	l803
   435                           
   436                           ;main.c: 114: {
   437                           ;main.c: 116: cur_key = key ;
   438  078E  0825               	movf	main@key,w
   439  078F  00FA               	movwf	??_main
   440  0790  087A               	movf	??_main,w
   441  0791  00A4               	movwf	main@cur_key
   442                           
   443                           ;main.c: 117: flag = 1 ;
   444  0792  3001               	movlw	1
   445  0793  00A6               	movwf	main@flag
   446  0794  3000               	movlw	0
   447  0795  00A7               	movwf	main@flag+1
   448                           
   449                           ;main.c: 118: wait = 50000 ;
   450  0796  3050               	movlw	80
   451  0797  00A2               	movwf	main@wait
   452  0798  30C3               	movlw	195
   453  0799  00A3               	movwf	main@wait+1
   454  079A                     l803:	
   455                           
   456                           ;main.c: 119: }
   457                           ;main.c: 120: if ( !wait-- )
   458  079A  3001               	movlw	1
   459  079B  02A2               	subwf	main@wait,f
   460  079C  3000               	movlw	0
   461  079D  1C03               	skipc
   462  079E  03A3               	decf	main@wait+1,f
   463  079F  02A3               	subwf	main@wait+1,f
   464  07A0  0A22               	incf	main@wait,w
   465  07A1  1D03               	skipz
   466  07A2  2F7B               	goto	l54
   467  07A3  0A23               	incf	main@wait+1,w
   468  07A4  1D03               	btfss	3,2
   469  07A5  2F7B               	goto	l54
   470                           
   471                           ;main.c: 121: {
   472                           ;main.c: 124: wait += 50000;
   473  07A6  3050               	movlw	80
   474  07A7  07A2               	addwf	main@wait,f
   475  07A8  1803               	skipnc
   476  07A9  0AA3               	incf	main@wait+1,f
   477  07AA  30C3               	movlw	195
   478  07AB  07A3               	addwf	main@wait+1,f
   479                           
   480                           ;main.c: 125: switch( cur_key )
   481  07AC  2FDF               	goto	l819
   482  07AD                     l807:	
   483                           ;main.c: 126: {
   484                           ;main.c: 127: case 0x3E :
   485                           
   486                           
   487                           ;main.c: 128: run_train(flag);
   488  07AD  0827               	movf	main@flag+1,w
   489  07AE  00F1               	movwf	run_train@flag+1
   490  07AF  0826               	movf	main@flag,w
   491  07B0  00F0               	movwf	run_train@flag
   492  07B1  120A  118A  26F8  120A  118A  	fcall	_run_train
   493                           
   494                           ;main.c: 129: break;
   495  07B6  2FED               	goto	l821
   496  07B7                     l809:	
   497                           ;main.c: 130: case 0x3D :
   498                           
   499                           
   500                           ;main.c: 131: left_right_train(flag);
   501  07B7  1283               	bcf	3,5	;RP0=0, select bank0
   502  07B8  1303               	bcf	3,6	;RP1=0, select bank0
   503  07B9  0827               	movf	main@flag+1,w
   504  07BA  00F1               	movwf	left_right_train@flag+1
   505  07BB  0826               	movf	main@flag,w
   506  07BC  00F0               	movwf	left_right_train@flag
   507  07BD  120A  118A  26BE  120A  118A  	fcall	_left_right_train
   508                           
   509                           ;main.c: 132: break;
   510  07C2  2FED               	goto	l821
   511  07C3                     l811:	
   512                           ;main.c: 133: case 0x3B :
   513                           
   514                           
   515                           ;main.c: 134: alernate_led(flag);
   516  07C3  1283               	bcf	3,5	;RP0=0, select bank0
   517  07C4  1303               	bcf	3,6	;RP1=0, select bank0
   518  07C5  0827               	movf	main@flag+1,w
   519  07C6  00F1               	movwf	alernate_led@flag+1
   520  07C7  0826               	movf	main@flag,w
   521  07C8  00F0               	movwf	alernate_led@flag
   522  07C9  120A  118A  2682  120A  118A  	fcall	_alernate_led
   523                           
   524                           ;main.c: 135: break;
   525  07CE  2FED               	goto	l821
   526  07CF                     l813:	
   527                           ;main.c: 136: case 0x37 :
   528                           
   529                           
   530                           ;main.c: 137: alternate_nibble(flag);
   531  07CF  1283               	bcf	3,5	;RP0=0, select bank0
   532  07D0  1303               	bcf	3,6	;RP1=0, select bank0
   533  07D1  0827               	movf	main@flag+1,w
   534  07D2  00F1               	movwf	alternate_nibble@flag+1
   535  07D3  0826               	movf	main@flag,w
   536  07D4  00F0               	movwf	alternate_nibble@flag
   537  07D5  120A  118A  268E  120A  118A  	fcall	_alternate_nibble
   538                           
   539                           ;main.c: 138: break;
   540  07DA  2FED               	goto	l821
   541  07DB                     l815:	
   542                           ;main.c: 139: default :
   543                           
   544                           
   545                           ;main.c: 140: PORTD = 0x00;
   546  07DB  1283               	bcf	3,5	;RP0=0, select bank0
   547  07DC  1303               	bcf	3,6	;RP1=0, select bank0
   548  07DD  0188               	clrf	8	;volatile
   549                           
   550                           ;main.c: 142: }
   551                           
   552                           ;main.c: 141: break;
   553  07DE  2FED               	goto	l821
   554  07DF                     l819:	
   555  07DF  0824               	movf	main@cur_key,w
   556                           
   557                           ; Switch size 1, requested type "space"
   558                           ; Number of cases is 4, Range of values is 55 to 62
   559                           ; switch strategies available:
   560                           ; Name         Instructions Cycles
   561                           ; simple_byte           13     7 (average)
   562                           ; direct_byte           35    11 (fixed)
   563                           ; jumptable            263     9 (fixed)
   564                           ;	Chosen strategy is simple_byte
   565  07E0  3A37               	xorlw	55	; case 55
   566  07E1  1903               	skipnz
   567  07E2  2FCF               	goto	l813
   568  07E3  3A0C               	xorlw	12	; case 59
   569  07E4  1903               	skipnz
   570  07E5  2FC3               	goto	l811
   571  07E6  3A06               	xorlw	6	; case 61
   572  07E7  1903               	skipnz
   573  07E8  2FB7               	goto	l809
   574  07E9  3A03               	xorlw	3	; case 62
   575  07EA  1903               	skipnz
   576  07EB  2FAD               	goto	l807
   577  07EC  2FDB               	goto	l815
   578  07ED                     l821:	
   579                           
   580                           ;main.c: 144: flag = 0 ;
   581  07ED  1283               	bcf	3,5	;RP0=0, select bank0
   582  07EE  1303               	bcf	3,6	;RP1=0, select bank0
   583  07EF  01A6               	clrf	main@flag
   584  07F0  01A7               	clrf	main@flag+1
   585  07F1  2F7B               	goto	l54
   586  07F2                     __end_of_main:	
   587                           
   588                           	psect	text1
   589  06F8                     __ptext1:	
   590 ;; *************** function _run_train *****************
   591 ;; Defined at:
   592 ;;		line 24 in file "main.c"
   593 ;; Parameters:    Size  Location     Type
   594 ;;  flag            2    0[COMMON] int 
   595 ;; Auto vars:     Size  Location     Type
   596 ;;		None
   597 ;; Return value:  Size  Location     Type
   598 ;;                  1    wreg      void 
   599 ;; Registers used:
   600 ;;		wreg, status,2, status,0
   601 ;; Tracked objects:
   602 ;;		On entry : 0/0
   603 ;;		On exit  : 0/0
   604 ;;		Unchanged: 0/0
   605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   606 ;;      Params:         2       0       0       0       0
   607 ;;      Locals:         4       0       0       0       0
   608 ;;      Temps:          4       0       0       0       0
   609 ;;      Totals:        10       0       0       0       0
   610 ;;Total ram usage:       10 bytes
   611 ;; Hardware stack levels used:    1
   612 ;; This function calls:
   613 ;;		Nothing
   614 ;; This function is called by:
   615 ;;		_main
   616 ;; This function uses a non-reentrant model
   617 ;;
   618                           
   619                           
   620                           ;psect for function _run_train
   621  06F8                     _run_train:	
   622                           
   623                           ;main.c: 38: static int direction_flag ;
   624                           ;main.c: 39: static int set_on_flag ;
   625                           ;main.c: 40: if ( flag )
   626                           
   627                           ;incstack = 0
   628                           ; Regs used in _run_train: [wreg+status,2+status,0]
   629  06F8  0870               	movf	run_train@flag,w
   630  06F9  0471               	iorwf	run_train@flag+1,w
   631  06FA  1903               	btfsc	3,2
   632  06FB  2F05               	goto	l697
   633                           
   634                           ;main.c: 41: {
   635                           ;main.c: 42: direction_flag = 0 ;
   636  06FC  01FB               	clrf	run_train@direction_flag
   637  06FD  01FC               	clrf	run_train@direction_flag+1
   638                           
   639                           ;main.c: 43: set_on_flag = 1;
   640  06FE  3001               	movlw	1
   641  06FF  1283               	bcf	3,5	;RP0=0, select bank0
   642  0700  1303               	bcf	3,6	;RP1=0, select bank0
   643  0701  00AA               	movwf	run_train@set_on_flag
   644  0702  3000               	movlw	0
   645  0703  00AB               	movwf	run_train@set_on_flag+1
   646                           
   647                           ;main.c: 44: PORTD = 0;
   648  0704  0188               	clrf	8	;volatile
   649  0705                     l697:	
   650                           
   651                           ;main.c: 45: }
   652                           ;main.c: 46: if ( PORTD == 0 )
   653  0705  1283               	bcf	3,5	;RP0=0, select bank0
   654  0706  1303               	bcf	3,6	;RP1=0, select bank0
   655  0707  0808               	movf	8,w	;volatile
   656  0708  1D03               	btfss	3,2
   657  0709  2F1B               	goto	l703
   658                           
   659                           ;main.c: 47: {
   660                           ;main.c: 48: set_on_flag = 1;
   661  070A  3001               	movlw	1
   662  070B  00AA               	movwf	run_train@set_on_flag
   663  070C  3000               	movlw	0
   664  070D  00AB               	movwf	run_train@set_on_flag+1
   665                           
   666                           ;main.c: 49: direction_flag = !direction_flag ;
   667  070E  087B               	movf	run_train@direction_flag,w
   668  070F  047C               	iorwf	run_train@direction_flag+1,w
   669  0710  1D03               	btfss	3,2
   670  0711  2F14               	goto	u250
   671  0712  3001               	movlw	1
   672  0713  2F15               	goto	u260
   673  0714                     u250:	
   674  0714  3000               	movlw	0
   675  0715                     u260:	
   676  0715  00F2               	movwf	??_run_train
   677  0716  01F3               	clrf	??_run_train+1
   678  0717  0872               	movf	??_run_train,w
   679  0718  00FB               	movwf	run_train@direction_flag
   680  0719  0873               	movf	??_run_train+1,w
   681  071A  00FC               	movwf	run_train@direction_flag+1
   682  071B                     l703:	
   683                           
   684                           ;main.c: 50: }
   685                           ;main.c: 51: if( PORTD == 255 )
   686  071B  0A08               	incf	8,w	;volatile
   687  071C  1D03               	btfss	3,2
   688  071D  2F20               	goto	l707
   689                           
   690                           ;main.c: 52: set_on_flag = 0;
   691  071E  01AA               	clrf	run_train@set_on_flag
   692  071F  01AB               	clrf	run_train@set_on_flag+1
   693  0720                     l707:	
   694                           
   695                           ;main.c: 53: if( direction_flag )
   696  0720  087B               	movf	run_train@direction_flag,w
   697  0721  047C               	iorwf	run_train@direction_flag+1,w
   698  0722  1903               	btfsc	3,2
   699  0723  2F45               	goto	l717
   700                           
   701                           ;main.c: 54: PORTD = (set_on_flag) ? (PORTD << 1) | 1 : PORTD << 1 ;
   702  0724  082A               	movf	run_train@set_on_flag,w
   703  0725  042B               	iorwf	run_train@set_on_flag+1,w
   704  0726  1D03               	btfss	3,2
   705  0727  2F32               	goto	l713
   706  0728  0808               	movf	8,w	;volatile
   707  0729  00F2               	movwf	??_run_train
   708  072A  01F3               	clrf	??_run_train+1
   709  072B  1003               	clrc
   710  072C  0DF2               	rlf	??_run_train,f
   711  072D  0DF3               	rlf	??_run_train+1,f
   712  072E  0872               	movf	??_run_train,w
   713  072F  00F6               	movwf	_run_train$35
   714  0730  0873               	movf	??_run_train+1,w
   715  0731  2F41               	goto	L1
   716  0732                     l713:	
   717  0732  0808               	movf	8,w	;volatile
   718  0733  00F2               	movwf	??_run_train
   719  0734  01F3               	clrf	??_run_train+1
   720  0735  1003               	clrc
   721  0736  0DF2               	rlf	??_run_train,f
   722  0737  0DF3               	rlf	??_run_train+1,f
   723  0738  3001               	movlw	1
   724  0739  0472               	iorwf	??_run_train,w
   725  073A  00F4               	movwf	??_run_train+2
   726  073B  3000               	movlw	0
   727  073C  0473               	iorwf	??_run_train+1,w
   728  073D  00F5               	movwf	??_run_train+3
   729  073E  0874               	movf	??_run_train+2,w
   730  073F  00F6               	movwf	_run_train$35
   731  0740  0875               	movf	??_run_train+3,w
   732  0741                     L1:	
   733  0741  00F7               	movwf	_run_train$35+1
   734  0742  0876               	movf	_run_train$35,w
   735  0743  0088               	movwf	8	;volatile
   736  0744  0008               	return
   737  0745                     l717:	
   738                           
   739                           ;main.c: 55: else
   740                           ;main.c: 56: PORTD = (set_on_flag) ? (PORTD >> 1) | 0x80 : PORTD >> 1 ;
   741  0745  082A               	movf	run_train@set_on_flag,w
   742  0746  042B               	iorwf	run_train@set_on_flag+1,w
   743  0747  1D03               	btfss	3,2
   744  0748  2F50               	goto	l721
   745  0749  0808               	movf	8,w	;volatile
   746  074A  00F2               	movwf	??_run_train
   747  074B  1003               	clrc
   748  074C  0C72               	rrf	??_run_train,w
   749  074D  00F3               	movwf	??_run_train+1
   750  074E  01F4               	clrf	??_run_train+2
   751  074F  2F5D               	goto	L2
   752  0750                     l721:	
   753  0750  0808               	movf	8,w	;volatile
   754  0751  00F2               	movwf	??_run_train
   755  0752  3001               	movlw	1
   756  0753                     u315:	
   757  0753  1003               	clrc
   758  0754  0CF2               	rrf	??_run_train,f
   759  0755  3EFF               	addlw	-1
   760  0756  1D03               	skipz
   761  0757  2F53               	goto	u315
   762  0758  3080               	movlw	128
   763  0759  0472               	iorwf	??_run_train,w
   764  075A  00F3               	movwf	??_run_train+1
   765  075B  3000               	movlw	0
   766  075C  00F4               	movwf	??_run_train+2
   767  075D                     L2:	
   768  075D  0873               	movf	??_run_train+1,w
   769  075E  00F8               	movwf	_run_train$36
   770  075F  0874               	movf	??_run_train+2,w
   771  0760  00F9               	movwf	_run_train$36+1
   772  0761  0878               	movf	_run_train$36,w
   773  0762  0088               	movwf	8	;volatile
   774  0763  0008               	return
   775  0764                     __end_of_run_train:	
   776                           
   777                           	psect	text2
   778  069A                     __ptext2:	
   779 ;; *************** function _read_digital_keypad *****************
   780 ;; Defined at:
   781 ;;		line 10 in file "digital_keypad.c"
   782 ;; Parameters:    Size  Location     Type
   783 ;;  mode            1    wreg     unsigned char 
   784 ;; Auto vars:     Size  Location     Type
   785 ;;  mode            1    1[COMMON] unsigned char 
   786 ;; Return value:  Size  Location     Type
   787 ;;                  1    wreg      unsigned char 
   788 ;; Registers used:
   789 ;;		wreg, status,2, status,0
   790 ;; Tracked objects:
   791 ;;		On entry : 0/0
   792 ;;		On exit  : 0/0
   793 ;;		Unchanged: 0/0
   794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   795 ;;      Params:         0       0       0       0       0
   796 ;;      Locals:         1       0       0       0       0
   797 ;;      Temps:          1       0       0       0       0
   798 ;;      Totals:         2       0       0       0       0
   799 ;;Total ram usage:        2 bytes
   800 ;; Hardware stack levels used:    1
   801 ;; This function calls:
   802 ;;		Nothing
   803 ;; This function is called by:
   804 ;;		_main
   805 ;; This function uses a non-reentrant model
   806 ;;
   807                           
   808                           
   809                           ;psect for function _read_digital_keypad
   810  069A                     _read_digital_keypad:	
   811                           
   812                           ;incstack = 0
   813                           ; Regs used in _read_digital_keypad: [wreg+status,2+status,0]
   814                           ;read_digital_keypad@mode stored from wreg
   815  069A  00F1               	movwf	read_digital_keypad@mode
   816                           
   817                           ;digital_keypad.c: 12: static unsigned char once = 1;
   818                           ;digital_keypad.c: 14: if (mode == 0)
   819  069B  0871               	movf	read_digital_keypad@mode,w
   820  069C  1D03               	btfss	3,2
   821  069D  2EA3               	goto	l767
   822                           
   823                           ;digital_keypad.c: 15: {
   824                           ;digital_keypad.c: 16: return PORTB & 0x3F;
   825  069E  1283               	bcf	3,5	;RP0=0, select bank0
   826  069F  1303               	bcf	3,6	;RP1=0, select bank0
   827  06A0  0806               	movf	6,w	;volatile
   828  06A1  393F               	andlw	63
   829  06A2  0008               	return
   830  06A3                     l767:	
   831                           ;digital_keypad.c: 17: }
   832                           
   833                           
   834                           ;digital_keypad.c: 18: else
   835                           ;digital_keypad.c: 19: {
   836                           ;digital_keypad.c: 20: if (((PORTB & 0x3F) != 0x3F) && once)
   837  06A3  303F               	movlw	63
   838  06A4  1283               	bcf	3,5	;RP0=0, select bank0
   839  06A5  1303               	bcf	3,6	;RP1=0, select bank0
   840  06A6  0506               	andwf	6,w	;volatile
   841  06A7  00F0               	movwf	??_read_digital_keypad
   842  06A8  303F               	movlw	63
   843  06A9  0670               	xorwf	??_read_digital_keypad,w
   844  06AA  1903               	btfsc	3,2
   845  06AB  2EB3               	goto	l779
   846  06AC  087D               	movf	read_digital_keypad@once,w
   847  06AD  1903               	btfsc	3,2
   848  06AE  2EB3               	goto	l779
   849                           
   850                           ;digital_keypad.c: 21: {
   851                           ;digital_keypad.c: 22: once = 0;
   852  06AF  01FD               	clrf	read_digital_keypad@once
   853                           
   854                           ;digital_keypad.c: 24: return PORTB & 0x3F;
   855  06B0  0806               	movf	6,w	;volatile
   856  06B1  393F               	andlw	63
   857  06B2  0008               	return
   858  06B3                     l779:	
   859                           ;digital_keypad.c: 25: }
   860                           
   861                           
   862                           ;digital_keypad.c: 26: else if ((PORTB & 0x3F) == 0x3F)
   863  06B3  303F               	movlw	63
   864  06B4  0506               	andwf	6,w	;volatile
   865  06B5  00F0               	movwf	??_read_digital_keypad
   866  06B6  303F               	movlw	63
   867  06B7  0670               	xorwf	??_read_digital_keypad,w
   868  06B8  1D03               	btfss	3,2
   869  06B9  2EBC               	goto	l783
   870                           
   871                           ;digital_keypad.c: 27: {
   872                           ;digital_keypad.c: 28: once = 1;
   873  06BA  01FD               	clrf	read_digital_keypad@once
   874  06BB  0AFD               	incf	read_digital_keypad@once,f
   875  06BC                     l783:	
   876                           
   877                           ;digital_keypad.c: 29: }
   878                           ;digital_keypad.c: 30: }
   879                           ;digital_keypad.c: 32: return 0x3F;
   880  06BC  303F               	movlw	63
   881  06BD  0008               	return
   882  06BE                     __end_of_read_digital_keypad:	
   883                           
   884                           	psect	text3
   885  06BE                     __ptext3:	
   886 ;; *************** function _left_right_train *****************
   887 ;; Defined at:
   888 ;;		line 60 in file "main.c"
   889 ;; Parameters:    Size  Location     Type
   890 ;;  flag            2    0[COMMON] int 
   891 ;; Auto vars:     Size  Location     Type
   892 ;;		None
   893 ;; Return value:  Size  Location     Type
   894 ;;                  1    wreg      void 
   895 ;; Registers used:
   896 ;;		wreg, status,2, status,0
   897 ;; Tracked objects:
   898 ;;		On entry : 0/0
   899 ;;		On exit  : 0/0
   900 ;;		Unchanged: 0/0
   901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   902 ;;      Params:         2       0       0       0       0
   903 ;;      Locals:         2       0       0       0       0
   904 ;;      Temps:          4       0       0       0       0
   905 ;;      Totals:         8       0       0       0       0
   906 ;;Total ram usage:        8 bytes
   907 ;; Hardware stack levels used:    1
   908 ;; This function calls:
   909 ;;		Nothing
   910 ;; This function is called by:
   911 ;;		_main
   912 ;; This function uses a non-reentrant model
   913 ;;
   914                           
   915                           
   916                           ;psect for function _left_right_train
   917  06BE                     _left_right_train:	
   918                           
   919                           ;main.c: 70: static int set_on_flag;
   920                           ;main.c: 71: if ( flag )
   921                           
   922                           ;incstack = 0
   923                           ; Regs used in _left_right_train: [wreg+status,2+status,0]
   924  06BE  0870               	movf	left_right_train@flag,w
   925  06BF  0471               	iorwf	left_right_train@flag+1,w
   926  06C0  1903               	btfsc	3,2
   927  06C1  2EC9               	goto	l731
   928                           
   929                           ;main.c: 72: {
   930                           ;main.c: 73: set_on_flag = 1;
   931  06C2  3001               	movlw	1
   932  06C3  1283               	bcf	3,5	;RP0=0, select bank0
   933  06C4  1303               	bcf	3,6	;RP1=0, select bank0
   934  06C5  00A8               	movwf	left_right_train@set_on_flag
   935  06C6  3000               	movlw	0
   936  06C7  00A9               	movwf	left_right_train@set_on_flag+1
   937                           
   938                           ;main.c: 74: PORTD = 0;
   939  06C8  0188               	clrf	8	;volatile
   940  06C9                     l731:	
   941                           
   942                           ;main.c: 75: }
   943                           ;main.c: 76: if ( PORTD == 0 )
   944  06C9  1283               	bcf	3,5	;RP0=0, select bank0
   945  06CA  1303               	bcf	3,6	;RP1=0, select bank0
   946  06CB  0808               	movf	8,w	;volatile
   947  06CC  1D03               	btfss	3,2
   948  06CD  2ED2               	goto	l735
   949                           
   950                           ;main.c: 77: set_on_flag = 1;
   951  06CE  3001               	movlw	1
   952  06CF  00A8               	movwf	left_right_train@set_on_flag
   953  06D0  3000               	movlw	0
   954  06D1  00A9               	movwf	left_right_train@set_on_flag+1
   955  06D2                     l735:	
   956                           
   957                           ;main.c: 78: if( PORTD == 255 )
   958  06D2  0A08               	incf	8,w	;volatile
   959  06D3  1D03               	btfss	3,2
   960  06D4  2ED7               	goto	l739
   961                           
   962                           ;main.c: 79: set_on_flag = 0;
   963  06D5  01A8               	clrf	left_right_train@set_on_flag
   964  06D6  01A9               	clrf	left_right_train@set_on_flag+1
   965  06D7                     l739:	
   966                           
   967                           ;main.c: 80: PORTD = (set_on_flag) ? (PORTD << 1) | 1 : PORTD << 1 ;
   968  06D7  0828               	movf	left_right_train@set_on_flag,w
   969  06D8  0429               	iorwf	left_right_train@set_on_flag+1,w
   970  06D9  1D03               	btfss	3,2
   971  06DA  2EE5               	goto	l743
   972  06DB  0808               	movf	8,w	;volatile
   973  06DC  00F2               	movwf	??_left_right_train
   974  06DD  01F3               	clrf	??_left_right_train+1
   975  06DE  1003               	clrc
   976  06DF  0DF2               	rlf	??_left_right_train,f
   977  06E0  0DF3               	rlf	??_left_right_train+1,f
   978  06E1  0872               	movf	??_left_right_train,w
   979  06E2  00F6               	movwf	_left_right_train$40
   980  06E3  0873               	movf	??_left_right_train+1,w
   981  06E4  2EF4               	goto	L3
   982  06E5                     l743:	
   983  06E5  0808               	movf	8,w	;volatile
   984  06E6  00F2               	movwf	??_left_right_train
   985  06E7  01F3               	clrf	??_left_right_train+1
   986  06E8  1003               	clrc
   987  06E9  0DF2               	rlf	??_left_right_train,f
   988  06EA  0DF3               	rlf	??_left_right_train+1,f
   989  06EB  3001               	movlw	1
   990  06EC  0472               	iorwf	??_left_right_train,w
   991  06ED  00F4               	movwf	??_left_right_train+2
   992  06EE  3000               	movlw	0
   993  06EF  0473               	iorwf	??_left_right_train+1,w
   994  06F0  00F5               	movwf	??_left_right_train+3
   995  06F1  0874               	movf	??_left_right_train+2,w
   996  06F2  00F6               	movwf	_left_right_train$40
   997  06F3  0875               	movf	??_left_right_train+3,w
   998  06F4                     L3:	
   999  06F4  00F7               	movwf	_left_right_train$40+1
  1000  06F5  0876               	movf	_left_right_train$40,w
  1001  06F6  0088               	movwf	8	;volatile
  1002  06F7  0008               	return
  1003  06F8                     __end_of_left_right_train:	
  1004                           
  1005                           	psect	text4
  1006  0678                     __ptext4:	
  1007 ;; *************** function _init_config *****************
  1008 ;; Defined at:
  1009 ;;		line 12 in file "main.c"
  1010 ;; Parameters:    Size  Location     Type
  1011 ;;		None
  1012 ;; Auto vars:     Size  Location     Type
  1013 ;;		None
  1014 ;; Return value:  Size  Location     Type
  1015 ;;                  1    wreg      void 
  1016 ;; Registers used:
  1017 ;;		wreg, status,2, status,0, pclath, cstack
  1018 ;; Tracked objects:
  1019 ;;		On entry : 0/0
  1020 ;;		On exit  : 0/0
  1021 ;;		Unchanged: 0/0
  1022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1023 ;;      Params:         0       0       0       0       0
  1024 ;;      Locals:         0       0       0       0       0
  1025 ;;      Temps:          0       0       0       0       0
  1026 ;;      Totals:         0       0       0       0       0
  1027 ;;Total ram usage:        0 bytes
  1028 ;; Hardware stack levels used:    1
  1029 ;; Hardware stack levels required when called:    1
  1030 ;; This function calls:
  1031 ;;		_init_digital_keypad
  1032 ;; This function is called by:
  1033 ;;		_main
  1034 ;; This function uses a non-reentrant model
  1035 ;;
  1036                           
  1037                           
  1038                           ;psect for function _init_config
  1039  0678                     _init_config:	
  1040                           
  1041                           ;main.c: 14: PORTD = 0x00;
  1042                           
  1043                           ;incstack = 0
  1044                           ; Regs used in _init_config: [wreg+status,2+status,0+pclath+cstack]
  1045  0678  1283               	bcf	3,5	;RP0=0, select bank0
  1046  0679  1303               	bcf	3,6	;RP1=0, select bank0
  1047  067A  0188               	clrf	8	;volatile
  1048                           
  1049                           ;main.c: 17: TRISD = 0x00;
  1050  067B  1683               	bsf	3,5	;RP0=1, select bank1
  1051  067C  1303               	bcf	3,6	;RP1=0, select bank1
  1052  067D  0188               	clrf	8	;volatile
  1053                           
  1054                           ;main.c: 20: init_digital_keypad();
  1055  067E  120A  118A  2672   	fcall	_init_digital_keypad
  1056  0681  0008               	return
  1057  0682                     __end_of_init_config:	
  1058                           
  1059                           	psect	text5
  1060  0672                     __ptext5:	
  1061 ;; *************** function _init_digital_keypad *****************
  1062 ;; Defined at:
  1063 ;;		line 4 in file "digital_keypad.c"
  1064 ;; Parameters:    Size  Location     Type
  1065 ;;		None
  1066 ;; Auto vars:     Size  Location     Type
  1067 ;;		None
  1068 ;; Return value:  Size  Location     Type
  1069 ;;                  1    wreg      void 
  1070 ;; Registers used:
  1071 ;;		wreg, status,2
  1072 ;; Tracked objects:
  1073 ;;		On entry : 0/0
  1074 ;;		On exit  : 0/0
  1075 ;;		Unchanged: 0/0
  1076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1077 ;;      Params:         0       0       0       0       0
  1078 ;;      Locals:         0       0       0       0       0
  1079 ;;      Temps:          0       0       0       0       0
  1080 ;;      Totals:         0       0       0       0       0
  1081 ;;Total ram usage:        0 bytes
  1082 ;; Hardware stack levels used:    1
  1083 ;; This function calls:
  1084 ;;		Nothing
  1085 ;; This function is called by:
  1086 ;;		_init_config
  1087 ;; This function uses a non-reentrant model
  1088 ;;
  1089                           
  1090                           
  1091                           ;psect for function _init_digital_keypad
  1092  0672                     _init_digital_keypad:	
  1093                           
  1094                           ;digital_keypad.c: 7: TRISB = TRISB | 0x3F;
  1095                           
  1096                           ;incstack = 0
  1097                           ; Regs used in _init_digital_keypad: [wreg+status,2]
  1098  0672  1683               	bsf	3,5	;RP0=1, select bank1
  1099  0673  1303               	bcf	3,6	;RP1=0, select bank1
  1100  0674  0806               	movf	6,w	;volatile
  1101  0675  383F               	iorlw	63
  1102  0676  0086               	movwf	6	;volatile
  1103  0677  0008               	return
  1104  0678                     __end_of_init_digital_keypad:	
  1105                           
  1106                           	psect	text6
  1107  068E                     __ptext6:	
  1108 ;; *************** function _alternate_nibble *****************
  1109 ;; Defined at:
  1110 ;;		line 84 in file "main.c"
  1111 ;; Parameters:    Size  Location     Type
  1112 ;;  flag            2    0[COMMON] int 
  1113 ;; Auto vars:     Size  Location     Type
  1114 ;;		None
  1115 ;; Return value:  Size  Location     Type
  1116 ;;                  1    wreg      void 
  1117 ;; Registers used:
  1118 ;;		wreg, status,2, status,0
  1119 ;; Tracked objects:
  1120 ;;		On entry : 0/0
  1121 ;;		On exit  : 0/0
  1122 ;;		Unchanged: 0/0
  1123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1124 ;;      Params:         2       0       0       0       0
  1125 ;;      Locals:         0       0       0       0       0
  1126 ;;      Temps:          0       0       0       0       0
  1127 ;;      Totals:         2       0       0       0       0
  1128 ;;Total ram usage:        2 bytes
  1129 ;; Hardware stack levels used:    1
  1130 ;; This function calls:
  1131 ;;		Nothing
  1132 ;; This function is called by:
  1133 ;;		_main
  1134 ;; This function uses a non-reentrant model
  1135 ;;
  1136                           
  1137                           
  1138                           ;psect for function _alternate_nibble
  1139  068E                     _alternate_nibble:	
  1140                           
  1141                           ;main.c: 86: if ( flag )
  1142                           
  1143                           ;incstack = 0
  1144                           ; Regs used in _alternate_nibble: [wreg+status,2+status,0]
  1145  068E  0870               	movf	alternate_nibble@flag,w
  1146  068F  0471               	iorwf	alternate_nibble@flag+1,w
  1147  0690  1903               	btfsc	3,2
  1148  0691  2E96               	goto	l751
  1149                           
  1150                           ;main.c: 87: PORTD = 0x0F;
  1151  0692  300F               	movlw	15
  1152  0693  1283               	bcf	3,5	;RP0=0, select bank0
  1153  0694  1303               	bcf	3,6	;RP1=0, select bank0
  1154  0695  0088               	movwf	8	;volatile
  1155  0696                     l751:	
  1156                           
  1157                           ;main.c: 89: PORTD = ~PORTD ;
  1158  0696  1283               	bcf	3,5	;RP0=0, select bank0
  1159  0697  1303               	bcf	3,6	;RP1=0, select bank0
  1160  0698  0988               	comf	8,f	;volatile
  1161  0699  0008               	return
  1162  069A                     __end_of_alternate_nibble:	
  1163                           
  1164                           	psect	text7
  1165  0682                     __ptext7:	
  1166 ;; *************** function _alernate_led *****************
  1167 ;; Defined at:
  1168 ;;		line 93 in file "main.c"
  1169 ;; Parameters:    Size  Location     Type
  1170 ;;  flag            2    0[COMMON] int 
  1171 ;; Auto vars:     Size  Location     Type
  1172 ;;		None
  1173 ;; Return value:  Size  Location     Type
  1174 ;;                  1    wreg      void 
  1175 ;; Registers used:
  1176 ;;		wreg, status,2, status,0
  1177 ;; Tracked objects:
  1178 ;;		On entry : 0/0
  1179 ;;		On exit  : 0/0
  1180 ;;		Unchanged: 0/0
  1181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1182 ;;      Params:         2       0       0       0       0
  1183 ;;      Locals:         0       0       0       0       0
  1184 ;;      Temps:          0       0       0       0       0
  1185 ;;      Totals:         2       0       0       0       0
  1186 ;;Total ram usage:        2 bytes
  1187 ;; Hardware stack levels used:    1
  1188 ;; This function calls:
  1189 ;;		Nothing
  1190 ;; This function is called by:
  1191 ;;		_main
  1192 ;; This function uses a non-reentrant model
  1193 ;;
  1194                           
  1195                           
  1196                           ;psect for function _alernate_led
  1197  0682                     _alernate_led:	
  1198                           
  1199                           ;main.c: 95: if ( flag )
  1200                           
  1201                           ;incstack = 0
  1202                           ; Regs used in _alernate_led: [wreg+status,2+status,0]
  1203  0682  0870               	movf	alernate_led@flag,w
  1204  0683  0471               	iorwf	alernate_led@flag+1,w
  1205  0684  1903               	btfsc	3,2
  1206  0685  2E8A               	goto	l757
  1207                           
  1208                           ;main.c: 96: PORTD = 0xAA;
  1209  0686  30AA               	movlw	170
  1210  0687  1283               	bcf	3,5	;RP0=0, select bank0
  1211  0688  1303               	bcf	3,6	;RP1=0, select bank0
  1212  0689  0088               	movwf	8	;volatile
  1213  068A                     l757:	
  1214                           
  1215                           ;main.c: 98: PORTD = ~PORTD ;
  1216  068A  1283               	bcf	3,5	;RP0=0, select bank0
  1217  068B  1303               	bcf	3,6	;RP1=0, select bank0
  1218  068C  0988               	comf	8,f	;volatile
  1219  068D  0008               	return
  1220  068E                     __end_of_alernate_led:	
  1221  007E                     btemp	set	126	;btemp
  1222  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            80      8      12
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_run_train

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0     624
                                             10 COMMON     1     1      0
                                              0 BANK0      8     8      0
                       _alernate_led
                   _alternate_nibble
                        _init_config
                   _left_right_train
                _read_digital_keypad
                          _run_train
 ---------------------------------------------------------------------------------
 (1) _run_train                                           10     8      2     123
                                              0 COMMON    10     8      2
 ---------------------------------------------------------------------------------
 (1) _read_digital_keypad                                  2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _left_right_train                                     8     6      2      99
                                              0 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 (1) _init_config                                          0     0      0       0
                _init_digital_keypad
 ---------------------------------------------------------------------------------
 (2) _init_digital_keypad                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _alternate_nibble                                     2     0      2      75
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _alernate_led                                         2     0      2      75
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _alernate_led
   _alternate_nibble
   _init_config
     _init_digital_keypad
   _left_right_train
   _read_digital_keypad
   _run_train

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      8       C       5       15.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      B       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      1A      12        0.0%
ABS                  0      0      1A       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Dec 27 16:34:12 2021

                          l54 077B                           l703 071B                           l721 0750  
                         l713 0732                           l731 06C9                           l707 0720  
                         l811 07C3                           l803 079A                           l717 0745  
                         l813 07CF                           l821 07ED                           l751 0696  
                         l743 06E5                           l735 06D2                           l815 07DB  
                         l807 07AD                           l809 07B7                           l739 06D7  
                         l819 07DF                           l757 068A                           l783 06BC  
                         l767 06A3                           l697 0705                           l779 06B3  
                         u250 0714                           u315 0753                           u260 0715  
       ??_read_digital_keypad 0070                   main@cur_key 0024                          _main 0764  
                        btemp 007E                          start 0000                  _run_train$35 0076  
                _run_train$36 0078       run_train@direction_flag 007B                         ?_main 0070  
               __CFG_WDTE$OFF 0000                  ?_init_config 0070                         _PORTB 0006  
                       _PORTD 0008                         _TRISB 0086                         _TRISD 0088  
        __end_of_alernate_led 068E                         status 0003                         wtemp0 007E  
             __initialization 07F2                  __end_of_main 07F2                        ??_main 007A  
   __size_of_left_right_train 003A   __end_of_init_digital_keypad 0678             ?_alternate_nibble 0070  
                __pdataCOMMON 007D            ??_alternate_nibble 0072       __end_of__initialization 07FC  
              __pcstackCOMMON 0070         __size_of_alernate_led 000C          left_right_train@flag 0070  
        __size_of_init_config 000A                    __pbssBANK0 0028   left_right_train@set_on_flag 0028  
                _alernate_led 0682                    __pmaintext 0764   __end_of_read_digital_keypad 06BE  
            _left_right_train 06BE            __size_of_run_train 006C                       __ptext1 06F8  
                     __ptext2 069A                       __ptext3 06BE                       __ptext4 0678  
                     __ptext5 0672                       __ptext6 068E                       __ptext7 0682  
                     main@key 0025          end_of_initialization 07FC             __end_of_run_train 0764  
   __size_of_alternate_nibble 000C  __size_of_init_digital_keypad 0006                 __pidataCOMMON 0671  
         start_initialization 07F2                 run_train@flag 0070      __end_of_left_right_train 06F8  
               ??_init_config 0070                   __pbssCOMMON 007B                     ___latbits 0002  
               __pcstackBANK0 0020          alternate_nibble@flag 0070           __end_of_init_config 0682  
__size_of_read_digital_keypad 0024              _alternate_nibble 068E                     _run_train 06F8  
            alernate_led@flag 0070           _init_digital_keypad 0672          ?_init_digital_keypad 0070  
                 _init_config 0678                    ?_run_train 0070                 __size_of_main 008E  
     read_digital_keypad@mode 0071       read_digital_keypad@once 007D          run_train@set_on_flag 002A  
               ?_alernate_led 0070             ?_left_right_train 0070         ??_init_digital_keypad 0070  
          ??_left_right_train 0072                      main@flag 0026                      main@mode 0020  
                    main@wait 0022           _left_right_train$40 0076                ??_alernate_led 0072  
         _read_digital_keypad 069A      __end_of_alternate_nibble 069A                   ??_run_train 0072  
        ?_read_digital_keypad 0070  
